name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_ENV: test
  TEST_DB_HOST: localhost
  TEST_DB_PORT: 3306
  TEST_DB_USERNAME: electridom_test
  TEST_DB_PASSWORD: electridom_test
  TEST_DB_NAME: electridom_test
  TEST_PORT: 3001
  TEST_JWT_SECRET: test-secret-key-for-ci
  TEST_JWT_EXPIRES_IN: 1h
  TEST_THROTTLE_TTL: 60
  TEST_THROTTLE_LIMIT: 10

jobs:
  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: electridom_test
          MYSQL_USER: electridom_test
          MYSQL_PASSWORD: electridom_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Copy environment files
        run: |
          cp env.example .env
          cp env.test.example .env.test

      - name: Setup test database
        run: npm run setup:test-db-complete
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 3306
          TEST_DB_USERNAME: electridom_test
          TEST_DB_PASSWORD: electridom_test
          TEST_DB_NAME: electridom_test

      - name: Run linting
        run: npm run lint

      - name: Run unit tests with coverage
        run: npm run test:unit:coverage
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 3306
          TEST_DB_USERNAME: electridom_test
          TEST_DB_PASSWORD: electridom_test
          TEST_DB_NAME: electridom_test

      - name: Run e2e tests
        run: npm run test:e2e
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 3306
          TEST_DB_USERNAME: electridom_test
          TEST_DB_PASSWORD: electridom_test
          TEST_DB_NAME: electridom_test

      - name: Build application
        run: npm run build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Check coverage threshold
        run: |
          COVERAGE=$(npx coverage-badges-cli --input=./coverage/lcov.info --output=./coverage/badges --type=cobertura)
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 40" | bc -l) )); then
            echo "❌ Coverage is below 40% threshold"
            exit 1
          else
            echo "✅ Coverage meets 40% threshold"
          fi

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Create build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/
          retention-days: 30

      - name: Create Docker image
        run: |
          docker build -t calculadora-electrica-backend:${{ github.sha }} .
          docker tag calculadora-electrica-backend:${{ github.sha }} calculadora-electrica-backend:latest

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: |
            Dockerfile
            docker-compose.yml
          retention-days: 30
